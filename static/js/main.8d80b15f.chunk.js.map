{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","inputValue","formulaDisplayValue","indexOfLastOperator","expParserArr","calculationWasDone","btnref","React","createRef","handleBtnPress","bind","calculateOutput","e","num","target","innerHTML","prevInputValue","this","length","setState","includes","slice","operatorIndex","split","map","item","idx","itemsToPush","Number","push","i","output","String","toFixed","output_copy","className","onClick","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8d80b15f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      inputValue: \"\",\r\n      formulaDisplayValue: \"\",\r\n      indexOfLastOperator: -1,\r\n      expParserArr: [],\r\n      calculationWasDone: false, //We will set this to true on every = btn press and then during new expression again set it to false.\r\n    };\r\n    this.btnref = React.createRef();\r\n\r\n    this.handleBtnPress = this.handleBtnPress.bind(this);\r\n    this.calculateOutput = this.calculateOutput.bind(this);\r\n  }\r\n\r\n  handleBtnPress(e) {\r\n    let num = e.target.innerHTML;\r\n    let prevInputValue = this.state.inputValue;\r\n\r\n    //Clear everything if AC button is pressed\r\n    if (num == \"AC\") {\r\n      this.setState({\r\n        inputValue: \"\",\r\n        formulaDisplayValue: \"\",\r\n        expParserArr: [],\r\n        calculationWasDone: false,\r\n        indexOfLastOperator: -1,\r\n      });\r\n      return;\r\n    }\r\n\r\n    //Clear formula bar if it already is filled with previous formula\r\n    if (this.state.formulaDisplayValue.length > 0) {\r\n      this.setState({ formulaDisplayValue: \"\" });\r\n    }\r\n\r\n    //Ignore zero if first character is also a zero\r\n    if (num == \"0\" && prevInputValue.length == 1) {\r\n      return;\r\n    }\r\n\r\n    //Ignore if first character is an operator symbol other than minus (-)\r\n    if ([\"+\", \"x\", \"÷\", \".\"].includes(num) && prevInputValue.length == 0) {\r\n      return;\r\n    }\r\n\r\n    //Make the operator as minus if previous is plus and current is minus or vice versa.\r\n    if (\r\n      [\"+\", \"-\"].includes(num) &&\r\n      [\"+\", \"-\"].includes(prevInputValue[prevInputValue.length - 1])\r\n    ) {\r\n      num = \"-\";\r\n      //Delete last operator of previous input value\r\n      this.setState((state, props) => {\r\n        return {\r\n          inputValue: state.inputValue.slice(0, state.inputValue.length - 1),\r\n        };\r\n      });\r\n    } //Ignore if consecutive operator symbols are pressed\r\n    else if (\r\n      [\"+\", \"-\", \"x\", \"÷\", \".\"].includes(num) &&\r\n      [\"+\", \"-\", \"*\", \"/\", \".\"].includes(\r\n        prevInputValue[prevInputValue.length - 1]\r\n      )\r\n    ) {\r\n      return;\r\n    } else {\r\n      //do nothing\r\n    }\r\n\r\n    debugger;\r\n    //Ignore dot is already a dot is present in the current number (From last operator index to current index)\r\n    if (\r\n      num == \".\" &&\r\n      this.state.inputValue\r\n        .slice(this.state.indexOfLastOperator + 1, this.state.inputValue.length)\r\n        .includes(\".\")\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    //Change symbol for multiply and divide\r\n    if (num == \"x\") {\r\n      num = \"*\";\r\n    } else if (num == \"÷\") {\r\n      num = \"/\";\r\n    } else {\r\n      //do nothing\r\n    }\r\n\r\n    // Either add the number to current input value string or remove the latest character if delete button is pressed\r\n    if (num == \"←\") {\r\n      this.setState((state, props) => {\r\n        return {\r\n          inputValue: state.inputValue.slice(0, state.inputValue.length - 1),\r\n        };\r\n      });\r\n    } else {\r\n      //If a number is pressed after previously a result was calculated, the new inputValue should be the number pressed and not be appended to previous result\r\n      if (this.state.calculationWasDone && \"1234567890\".includes(num)) {\r\n        this.setState((state, props) => {\r\n          return { inputValue: num };\r\n        });\r\n      } else {\r\n        \r\n        //Update the indexOfLastOperator to the index of the operator when it is pressed else let ie be unchanged.\r\n        let operatorIndex = \"1234567890.\".includes(num) \r\n          ? this.state.indexOfLastOperator\r\n          : this.state.inputValue.length;\r\n        this.setState((state, props) => {\r\n          return {\r\n            inputValue: state.inputValue + num,\r\n            indexOfLastOperator: operatorIndex,\r\n          };\r\n        });\r\n      }\r\n    }\r\n\r\n    //Make the calculationWasDone flag as false since this is a new calculation\r\n    if (this.state.calculationWasDone) {\r\n      this.setState({ calculationWasDone: false });\r\n    }\r\n  }\r\n\r\n  calculateOutput() {\r\n    //Split and push numbers and operators to parser Array\r\n\r\n    let { inputValue, expParserArr } = this.state;\r\n    let indexOfLastOperator = -1; //We are parsing the inputValue from beginning so this has to be -1\r\n    inputValue.split(\"\").map((item, idx) => {\r\n      if ((\"+*/-\".includes(item) || idx == inputValue.length - 1) && idx != 0) {\r\n        //If we reach last character\r\n        if (idx == inputValue.length - 1) {\r\n          let itemsToPush = Number(\r\n            inputValue.slice(\r\n              indexOfLastOperator + 1,\r\n              idx + 1 // Here we are doing idx+1 so that we can capture the last character also\r\n            )\r\n          );\r\n\r\n          expParserArr.push(itemsToPush);\r\n          // We are not pushing the last current item as it is already part of itemsToPush\r\n\r\n          indexOfLastOperator = idx;\r\n        } else {\r\n          let itemsToPush = Number(\r\n            inputValue.slice(indexOfLastOperator + 1, idx)\r\n          );\r\n\r\n          expParserArr.push(itemsToPush);\r\n          expParserArr.push(item);\r\n\r\n          indexOfLastOperator = idx;\r\n        }\r\n      }\r\n    });\r\n\r\n    //console.log(expParserArr);\r\n\r\n    //Parse the array\r\n\r\n    let i = 0;\r\n    while (i < expParserArr.length) {\r\n      if (expParserArr[i] == \"*\") {\r\n        expParserArr = [\r\n          ...expParserArr.slice(0, i - 1),\r\n          expParserArr[i - 1] * expParserArr[i + 1],\r\n          ...expParserArr.slice(i + 2),\r\n        ];\r\n        // i += 2;\r\n        continue;\r\n      }\r\n\r\n      if (expParserArr[i] == \"/\") {\r\n        expParserArr = [\r\n          ...expParserArr.slice(0, i - 1),\r\n          expParserArr[i - 1] / expParserArr[i + 1],\r\n          ...expParserArr.slice(i + 2),\r\n        ];\r\n        continue; // i += 2;\r\n      }\r\n\r\n      i++;\r\n    }\r\n    // We transverse to find an operator, remove its previous and next element, perform calculation, and replace these 3 elements in array\r\n    // with the computer value\r\n    i = 0;\r\n    while (i < expParserArr.length) {\r\n      if (expParserArr[i] == \"+\") {\r\n        expParserArr = [\r\n          ...expParserArr.slice(0, i - 1),\r\n          expParserArr[i - 1] + expParserArr[i + 1],\r\n          ...expParserArr.slice(i + 2),\r\n        ];\r\n        continue;\r\n      }\r\n\r\n      if (expParserArr[i] == \"-\") {\r\n        expParserArr = [\r\n          ...expParserArr.slice(0, i - 1),\r\n          expParserArr[i - 1] - expParserArr[i + 1],\r\n          ...expParserArr.slice(i + 2),\r\n        ];\r\n        continue;\r\n      }\r\n      i++;\r\n    }\r\n\r\n    //Show formula and latest answer\r\n\r\n    let output =\r\n      expParserArr[0] % 1 > 0\r\n        ? String(expParserArr[0].toFixed(4))\r\n        : String(expParserArr[0]); // Show the decimal points only if needed\r\n\r\n    //Remove unecessary zereos after decimal point\r\n    let output_copy = output.slice(0); //Make string copy\r\n    for (let i = output.length - 1; i >= output.length - 3; i--) {\r\n      if (output[i] == \"0\") {\r\n        output_copy = output.slice(0, i);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    output = output_copy.slice(0);\r\n\r\n    this.setState((state, props) => {\r\n      return {\r\n        inputValue: output,\r\n        formulaDisplayValue: state.inputValue,\r\n        expParserArr: [],\r\n        indexOfLastOperator: -1,\r\n        calculationWasDone: true,\r\n      };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"calculator\">\r\n          <div className=\"display\">\r\n            <p\r\n              className={`formula-display ${\r\n                this.state.formulaDisplayValue.length > 0\r\n                  ? \".formula-display-has-value\"\r\n                  : \"\"\r\n              }`}\r\n            >\r\n              {this.state.formulaDisplayValue}\r\n            </p>\r\n            <p className=\"input-display\">{this.state.inputValue}</p>\r\n          </div>\r\n          <div className=\"numpad\">\r\n            <div className=\"btn btn-ac\" onClick={this.handleBtnPress}>\r\n              AC\r\n            </div>\r\n            <div\r\n              className=\"btn btn-round btn-divide \"\r\n              onClick={this.handleBtnPress}\r\n            >\r\n              &divide;\r\n            </div>{\" \"}\r\n            {/*Divide sign*/}\r\n            <div\r\n              className=\"btn btn-round btn-delete\"\r\n              onClick={this.handleBtnPress}\r\n            >\r\n              &#8592;\r\n            </div>{\" \"}\r\n            {/*Left Arrow/ Delete symbol*/}\r\n            <div className=\"btn\" value=\"7\" onClick={this.handleBtnPress}>\r\n              7\r\n            </div>\r\n            <div className=\"btn\" onClick={this.handleBtnPress}>\r\n              8\r\n            </div>\r\n            <div className=\"btn\" onClick={this.handleBtnPress}>\r\n              9\r\n            </div>\r\n            <div\r\n              className=\"btn btn-round btn-multiply\"\r\n              onClick={this.handleBtnPress}\r\n            >\r\n              x\r\n            </div>\r\n            <div className=\"btn\" onClick={this.handleBtnPress}>\r\n              4\r\n            </div>\r\n            <div className=\"btn\" onClick={this.handleBtnPress}>\r\n              5\r\n            </div>\r\n            <div className=\"btn\" onClick={this.handleBtnPress}>\r\n              6\r\n            </div>\r\n            <div\r\n              className=\"btn btn-round btn-minus\"\r\n              onClick={this.handleBtnPress}\r\n            >\r\n              -\r\n            </div>\r\n            <div className=\"btn\" onClick={this.handleBtnPress}>\r\n              1\r\n            </div>\r\n            <div className=\"btn\" onClick={this.handleBtnPress}>\r\n              2\r\n            </div>\r\n            <div className=\"btn\" onClick={this.handleBtnPress}>\r\n              3\r\n            </div>\r\n            <div className=\"btn btn-round\" onClick={this.handleBtnPress}>\r\n              +\r\n            </div>\r\n            <div className=\"btn btn-dot\" onClick={this.handleBtnPress}>\r\n              .\r\n            </div>\r\n            <div className=\"btn\" onClick={this.handleBtnPress}>\r\n              0\r\n            </div>\r\n            <div className=\"btn btn-equal\" onClick={this.calculateOutput}>\r\n              =\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}