{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","inputValue","formulaDisplayValue","indexOfLastOperator","expParserArr","btnref","React","createRef","handleBtnPress","bind","calculateOutput","e","num","target","innerHTML","prevInputValue","this","length","setState","includes","slice","split","map","item","idx","itemsToPush","parseInt","push","i","output","String","toFixed","className","onClick","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6367c46f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      inputValue: \"\",\n      formulaDisplayValue: \"\",\n      indexOfLastOperator: -1,\n      expParserArr: [],\n    };\n    this.btnref = React.createRef();\n\n    this.handleBtnPress = this.handleBtnPress.bind(this);\n    this.calculateOutput = this.calculateOutput.bind(this);\n  }\n\n  handleBtnPress(e) {\n    let num = e.target.innerHTML;\n    let prevInputValue = this.state.inputValue;\n\n    //Clear everything if AC button is pressed\n    if (num == \"AC\") {\n      this.setState({\n        inputValue: \"\",\n        formulaDisplayValue: \"\",\n        expParserArr: [],\n      });\n      return;\n    }\n\n    //Clear formula bar if it already is filled with previous formula\n    if (this.state.formulaDisplayValue.length > 0) {\n      this.setState({ formulaDisplayValue: \"\" });\n    }\n\n    //Ignore if first character is zero\n    if (num == \"0\" && prevInputValue.length == 0) {\n      return;\n    }\n\n    //Ignore if first character is an operator symbol other than minus (-)\n    if ([\"+\", \"x\", \"÷\", \".\"].includes(num) && prevInputValue.length == 0) {\n      return;\n    }\n\n    //Make the operator as minus if previous is plus and current is minus or vice versa.\n    if (\n      [\"+\", \"-\"].includes(num) &&\n      [\"+\", \"-\"].includes(prevInputValue[prevInputValue.length - 1])\n    ) {\n      num = \"-\";\n      //Delete last operator of previous input value\n      this.setState((state, props) => {\n        return {\n          inputValue: state.inputValue.slice(0, state.inputValue.length - 1),\n        };\n      });\n    } //Ignore if consecutive operator symbols are pressed\n    else if (\n      [\"+\", \"-\", \"x\", \"÷\", \".\"].includes(num) &&\n      [\"+\", \"-\", \"*\", \"/\", \".\"].includes(\n        prevInputValue[prevInputValue.length - 1]\n      )\n    ) {\n      return;\n    } else {\n      //do nothing\n    }\n\n    //Ignore dot is already a dot is present\n    if (num == \".\" && prevInputValue.includes(\".\")) {\n      return;\n    }\n\n    //Change symbol for multiply and divide\n    if (num == \"x\") {\n      num = \"*\";\n    } else if (num == \"÷\") {\n      num = \"/\";\n    } else {\n      //do nothing\n    }\n\n    // Either add the number to current input value string or remove the latest character if delete button is pressed\n    if (num == \"←\") {\n      this.setState((state, props) => {\n        return {\n          inputValue: state.inputValue.slice(0, state.inputValue.length - 1),\n        };\n      });\n    } else {\n      this.setState((state, props) => {\n        return { inputValue: state.inputValue + num };\n      });\n    }\n  }\n\n  calculateOutput() {\n    //Split and push numbers and operators to parser Array\n\n    let { inputValue, expParserArr, indexOfLastOperator } = this.state;\n    inputValue.split(\"\").map((item, idx) => {\n      if ((\"+*/-\".includes(item) || idx == inputValue.length - 1) && idx != 0) {\n        //If we reach last character\n        if (idx == inputValue.length - 1) {\n          let itemsToPush = parseInt(\n            inputValue.slice(\n              indexOfLastOperator + 1,\n              idx + 1 // Here we are doing idx+1 so that we can capture the last character also\n            )\n          );\n\n          expParserArr.push(itemsToPush);\n          // We are not pushing the last current item as it is already part of itemsToPush\n\n          indexOfLastOperator = idx;\n        } else {\n          let itemsToPush = parseInt(\n            inputValue.slice(indexOfLastOperator + 1, idx)\n          );\n\n          expParserArr.push(itemsToPush);\n          expParserArr.push(item);\n\n          indexOfLastOperator = idx;\n        }\n      }\n    });\n\n    //console.log(expParserArr);\n\n    //Parse the array\n\n    let i = 0;\n    while (i < expParserArr.length) {\n      if (expParserArr[i] == \"*\") {\n        expParserArr = [\n          ...expParserArr.slice(0, i - 1),\n          expParserArr[i - 1] * expParserArr[i + 1],\n          ...expParserArr.slice(i + 2),\n        ];\n        // i += 2;\n        continue;\n      }\n\n      if (expParserArr[i] == \"/\") {\n        expParserArr = [\n          ...expParserArr.slice(0, i - 1),\n          expParserArr[i - 1] / expParserArr[i + 1],\n          ...expParserArr.slice(i + 2),\n        ];\n        continue; // i += 2;\n      }\n\n      i++;\n    }\n    // We transverse to find an operator, remove its previous and next element, perform calculation, and replace these 3 elements in array\n    // with the computer value\n    i = 0;\n    while (i < expParserArr.length) {\n      if (expParserArr[i] == \"+\") {\n        expParserArr = [\n          ...expParserArr.slice(0, i - 1),\n          expParserArr[i - 1] + expParserArr[i + 1],\n          ...expParserArr.slice(i + 2),\n        ];\n        continue;\n      }\n\n      if (expParserArr[i] == \"-\") {\n        expParserArr = [\n          ...expParserArr.slice(0, i - 1),\n          expParserArr[i - 1] - expParserArr[i + 1],\n          ...expParserArr.slice(i + 2),\n        ];\n        continue;\n      }\n      i++;\n    }\n\n    //Show formula and latest answer\n\n    let output =\n      expParserArr[0] % 1 > 0\n        ? String(expParserArr[0].toFixed(4))\n        : String(expParserArr[0]); // Show the decimal points only if needed\n\n    this.setState((state, props) => {\n      return {\n        inputValue: output,\n        formulaDisplayValue: state.inputValue,\n        expParserArr: [],\n        indexOfLastOperator: -1,\n      };\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"calculator\">\n          <div className=\"display\">\n            <p\n              className={`formula-display ${\n                this.state.formulaDisplayValue.length > 0\n                  ? \".formula-display-has-value\"\n                  : \"\"\n              }`}\n            >\n              {this.state.formulaDisplayValue}\n            </p>\n            <p className=\"input-display\">{this.state.inputValue}</p>\n          </div>\n          <div className=\"numpad\">\n            <div className=\"btn btn-ac\" onClick={this.handleBtnPress}>\n              AC\n            </div>\n            <div\n              className=\"btn btn-round btn-divide \"\n              onClick={this.handleBtnPress}\n            >\n              &divide;\n            </div>{\" \"}\n            {/*Divide sign*/}\n            <div\n              className=\"btn btn-round btn-delete\"\n              onClick={this.handleBtnPress}\n            >\n              &#8592;\n            </div>{\" \"}\n            {/*Left Arrow/ Delete symbol*/}\n            <div className=\"btn\" value=\"7\" onClick={this.handleBtnPress}>\n              7\n            </div>\n            <div className=\"btn\" onClick={this.handleBtnPress}>\n              8\n            </div>\n            <div className=\"btn\" onClick={this.handleBtnPress}>\n              9\n            </div>\n            <div\n              className=\"btn btn-round btn-multiply\"\n              onClick={this.handleBtnPress}\n            >\n              x\n            </div>\n            <div className=\"btn\" onClick={this.handleBtnPress}>\n              4\n            </div>\n            <div className=\"btn\" onClick={this.handleBtnPress}>\n              5\n            </div>\n            <div className=\"btn\" onClick={this.handleBtnPress}>\n              6\n            </div>\n            <div\n              className=\"btn btn-round btn-minus\"\n              onClick={this.handleBtnPress}\n            >\n              -\n            </div>\n            <div className=\"btn\" onClick={this.handleBtnPress}>\n              1\n            </div>\n            <div className=\"btn\" onClick={this.handleBtnPress}>\n              2\n            </div>\n            <div className=\"btn\" onClick={this.handleBtnPress}>\n              3\n            </div>\n            <div className=\"btn btn-round\" onClick={this.handleBtnPress}>\n              +\n            </div>\n            <div className=\"btn btn-dot\" onClick={this.handleBtnPress}>\n              .\n            </div>\n            <div className=\"btn\" onClick={this.handleBtnPress}>\n              0\n            </div>\n            <div className=\"btn btn-equal\" onClick={this.calculateOutput}>\n              =\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}